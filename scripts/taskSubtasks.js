/**
 * Array to store subtasks for editing
 *
 * @type {Array<Object>}
 */
let editSubtasks = [];

/**
 * Dynamically renders the add subtask input field and associated buttons
 */
function addTaskRenderAddButton() {
  let input = document.getElementById("addTaskSubtask").value;
  if (input.length === 0) {
    let container = document.getElementById("addTaskSubtaskContainer");
    container.innerHTML = templateAddTaskRenderAddButtonWithoutInput();
  }
  if (input.length > 0) {
    let container = document.getElementById("addTaskSubtaskDeleteButton");
    container.innerHTML = templateAddTaskRenderAddButtonWithInput();
  }
  document.getElementById("addTaskSubtask").focus();
}

/**
 * Renders the add task button and the plus button within the specified container
 */
function addTaskRenderAddButtonPlusButton() {
  let container = document.getElementById("addTaskSubtaskDeleteButton");
  container.innerHTML = templateAddTaskRenderAddButtonPlusButton();
  document.getElementById("addTaskSubtask").focus();
}

/**
 * Clears the input field for adding subtasks and re-renders the "Add" button.
 */
function reRenderSubtask() {
  document.getElementById("addTaskSubtask").value = "";
  addTaskRenderAddButton();
}

/**
 * Starts validation and adds a new subtask to the respective arrays and updates the UI
 */
function addTaskAddSubtask() {
  let SubtaskTitleInput = document.getElementById('addTaskSubtask');
  let validation = validateSubtaskInput(SubtaskTitleInput.value);
  if (validation) {
    let input = document.getElementById("addTaskSubtask").value;
    addTaskSubtasks.push(input);
    let arrayEditSubtask = {
      status: "open",
      titel: input,
    };
    editSubtasks.push(arrayEditSubtask);
    renderSubtaskContainer();
    reRenderSubtask();
  }
}

/**
 * Renders the subtask container by dynamically creating and adding subtask elements to the DOM
 */
function renderSubtaskContainer() {
  let container = document.getElementById("subtaskContainer");
  container.innerHTML = ``;
  for (let i = 0; i < addTaskSubtasks.length; i++) {
    let subtaskText = addTaskSubtasks[i];
    container.innerHTML += `
      <div class="addTask_subtask" id="subtask${i}" onmouseout="dNone('subtaskImg${i}')" onmouseover="dNone('subtaskImg${i}')">
        ${templateRenderSubtaskContainer(i, subtaskText)}
      </div>
      `;
  }
}

/**
 * Renders the subtask edit input field for a given subtask ID.
 * This function replaces the subtask text with an input field, allowing the user to edit the subtask.
 * It also adds delete and checkmark buttons for managing the subtask.
 *
 * @param {number} id - The ID of the subtask to edit
 */
function subtaskRenderEdit(id) {
  container = document.getElementById("subtask" + id);
  toggleClassWithoutHover(id);
  let subtaskText = addTaskSubtasks[id];
  document.getElementById("subtask" + id).onmouseover = null;
  document.getElementById("subtask" + id).onmouseout = null;
  container.innerHTML = templateSubtaskRenderEdit(subtaskText, id);
}

/**
 * Finishes editing a subtask, updating the task list and UI
 *
 * @param {number|string} id - The ID of the subtask that was edited.  This can be a number or a string.
 */
function finishedEditSubtask(id) {
  let editText = document.getElementById("editSubtask" + id).value;
  addTaskSubtasks[id] = editText;
  editSubtasks[id].titel = editText;
  let onmouseoverId = "subtaskImg" + id;
  container = document.getElementById("subtask" + id);
  container.innerHTML = `${templateRenderSubtaskContainer(id, editText)}`;
  document.getElementById("subtask" + id).onmouseover = function () {
    dNone(onmouseoverId);
  };
  document.getElementById("subtask" + id).onmouseout = function () {
    dNone(onmouseoverId);
  };
}

/**
 * Toggles the "without_hover_background" class on the element with the specified ID.
 * The ID is dynamically generated by prefixing "subtask" to the provided input.
 *
 * @param {string|number} id - The ID of the subtask element, without the "subtask" prefix.
 *                          This will be concatenated with "subtask" to form the final ID.
 */
function toggleClassWithoutHover(id) {
  let container = document.getElementById("subtask" + id);
  container.classList.toggle("without_hover_background");
}

/**
 * Deletes a subtask at the specified index
 *
 * @param {number} i - The index of the subtask to delete
 */
function deleteSubtask(i) {
  addTaskSubtasks.splice(i, 1);
  editSubtasks.splice(i, 1);
  renderSubtaskContainer();
}

/**
 * Renders the cancel button within the "addTaskButtonCancel" container
 */
function addTaskRenderCancelButton(id) {
  let container = document.getElementById(id);
  container.innerHTML =
    'Clear <img src="assets/img/buttonCancelHover.svg" alt="cancel"/>';
}

/**
 * Adds a "Clear" button with a cancel icon to the "addTaskButtonCancel" container
 */
function addTaskResetCancelButton(id) {
  let container = document.getElementById(id);
  container.innerHTML =
    'Clear <img src="assets/img/buttonCancel.svg" alt="cancel"/>';
}

/**
 * Validates the subtask title input.
 *
 * @param {string} title - The subtask title to validate.
 * @returns {boolean} - Returns true if the title is valid, otherwise false.
 */
function validateSubtaskInput(title) {
  title = title.trim();
  if (title.replace(/\s/g, "").length < 2) {
    postUserFeedback(`Min. 2 characters.`, `userFeedbackSubTask`);
    return false;
  }
  const titlePattern = /^[A-Za-zÀ-ÖØ-öø-ÿ0-9' -]+$/;
  if (!titlePattern.test(title)) {
    postUserFeedback(`Letters, numbers, spaces, hyphens.`, `userFeedbackSubTask`);
    return false;
  }
  document.getElementById("userFeedbackSubTask").innerHTML = "";
  return true;
}

/**
 * Adds an event listener to the subtask input field for Validation after the DOM has loaded.
 */
document.addEventListener('DOMContentLoaded', () => {
  let SubtaskTitleInput = document.getElementById('addTaskSubtask');
  if (SubtaskTitleInput) {
    SubtaskTitleInput.addEventListener('blur', function () {
      validateSubtaskInput(this.value);
    });
  }
});